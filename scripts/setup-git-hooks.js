#!/usr/bin/env node

// Setup Git Hooks for Architecture Updates
// Installs hooks that trigger architecture refresh on git events

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

const projectRoot = process.cwd()
const hooksDir = path.join(projectRoot, '.git', 'hooks')

// Hook scripts
const hooks = {
  'post-commit': `#!/bin/sh
# Post-commit hook to trigger architecture update
# Automatically generated by setup-git-hooks.js

echo "🔄 Git commit detected - triggering architecture update..."

# Check if this is a Next.js project with our architecture system
if [ -f "src/lib/architecture/DynamicArchitectureProvider.ts" ]; then
    # If development server is running, trigger update via API
    if curl -s http://localhost:3000/api/architecture/health > /dev/null 2>&1; then
        echo "📡 Triggering architecture refresh via API..."
        curl -s -X POST http://localhost:3000/api/architecture \\
             -H "Content-Type: application/json" \\
             -d '{"action":"invalidate-cache"}' > /dev/null 2>&1
        echo "✅ Architecture cache invalidated"
    else
        echo "ℹ️ Development server not running - architecture will refresh on next request"
    fi
else
    echo "ℹ️ Architecture system not found - skipping update"
fi

exit 0
`,

  'post-merge': `#!/bin/sh
# Post-merge hook to trigger architecture update
# Automatically generated by setup-git-hooks.js

echo "🔄 Git merge detected - triggering architecture update..."

# Check if this is a Next.js project with our architecture system
if [ -f "src/lib/architecture/DynamicArchitectureProvider.ts" ]; then
    # If development server is running, trigger update via API
    if curl -s http://localhost:3000/api/architecture/health > /dev/null 2>&1; then
        echo "📡 Triggering architecture refresh via API..."
        curl -s -X POST http://localhost:3000/api/architecture \\
             -H "Content-Type: application/json" \\
             -d '{"action":"invalidate-cache"}' > /dev/null 2>&1
        echo "✅ Architecture cache invalidated"
    else
        echo "ℹ️ Development server not running - architecture will refresh on next request"
    fi
else
    echo "ℹ️ Architecture system not found - skipping update"
fi

exit 0
`,

  'pre-push': `#!/bin/sh
# Pre-push hook to ensure architecture is up to date
# Automatically generated by setup-git-hooks.js

echo "🔍 Pre-push: Checking architecture system health..."

# Check if this is a Next.js project with our architecture system
if [ -f "src/lib/architecture/DynamicArchitectureProvider.ts" ]; then
    # If development server is running, get health status
    if curl -s http://localhost:3000/api/architecture/health > /dev/null 2>&1; then
        echo "📊 Architecture system healthy"
    else
        echo "ℹ️ Architecture system found but dev server not running"
    fi
    
    # Check for any uncommitted changes to critical architecture files
    if git status --porcelain | grep -E "(src/lib/architecture/|src/components/architecture/|CLAUDE\\.md)" > /dev/null; then
        echo "⚠️ Warning: Uncommitted changes to architecture files detected"
        echo "   Consider committing architecture changes before pushing"
    fi
else
    echo "ℹ️ Architecture system not found - skipping checks"
fi

exit 0
`
}

console.log('🚀 Setting up Git Hooks for Architecture Updates...')

// Check if this is a git repository
if (!fs.existsSync(path.join(projectRoot, '.git'))) {
  console.error('❌ Error: Not a git repository')
  process.exit(1)
}

// Create hooks directory if it doesn't exist
if (!fs.existsSync(hooksDir)) {
  console.log('📁 Creating hooks directory...')
  fs.mkdirSync(hooksDir, { recursive: true })
}

// Install each hook
let hooksInstalled = 0
let hooksSkipped = 0

for (const [hookName, hookScript] of Object.entries(hooks)) {
  const hookPath = path.join(hooksDir, hookName)
  
  // Check if hook already exists
  if (fs.existsSync(hookPath)) {
    // Read existing hook to see if it's ours
    const existingContent = fs.readFileSync(hookPath, 'utf8')
    
    if (existingContent.includes('setup-git-hooks.js')) {
      console.log(`🔄 Updating existing hook: ${hookName}`)
      fs.writeFileSync(hookPath, hookScript)
      
      // Make executable (Unix/Mac)
      if (process.platform !== 'win32') {
        execSync(`chmod +x "${hookPath}"`)
      }
      
      hooksInstalled++
    } else {
      console.log(`⚠️  Hook ${hookName} already exists (not managed by us) - skipping`)
      hooksSkipped++
    }
  } else {
    console.log(`📝 Installing new hook: ${hookName}`)
    fs.writeFileSync(hookPath, hookScript)
    
    // Make executable (Unix/Mac)
    if (process.platform !== 'win32') {
      execSync(`chmod +x "${hookPath}"`)
    }
    
    hooksInstalled++
  }
}

console.log(`\n✅ Git hooks setup complete!`)
console.log(`   📥 Hooks installed/updated: ${hooksInstalled}`)
console.log(`   ⏭️  Hooks skipped: ${hooksSkipped}`)

if (hooksInstalled > 0) {
  console.log(`\n🎯 Hooks will trigger on:`)
  console.log(`   • post-commit: After each git commit`)
  console.log(`   • post-merge: After git merge/pull operations`)
  console.log(`   • pre-push: Before pushing changes (health check)`)
  
  console.log(`\n💡 How it works:`)
  console.log(`   • If dev server is running (localhost:3000), hooks will trigger immediate architecture refresh`)
  console.log(`   • If dev server is off, architecture will refresh on next request`)
  console.log(`   • Hooks are silent and won't interfere with your git workflow`)
}

console.log(`\n🔧 To remove hooks later, run: rm .git/hooks/post-commit .git/hooks/post-merge .git/hooks/pre-push`)