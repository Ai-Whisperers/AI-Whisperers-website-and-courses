name: Test Suite

on:
  push:
    branches: [ main, refactor/enterprise, dockerization ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22.x'
  PNPM_VERSION: '10.18.2'

jobs:
  # Job 1: Unit and Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Compile content
        run: pnpm run compile-content

      - name: Generate Prisma client
        run: pnpm run db:generate

      - name: Run unit tests with coverage
        run: pnpm test -- --coverage --maxWorkers=2
        env:
          CI: true

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./apps/web/coverage/coverage-final.json,./packages/state-core/coverage/coverage-final.json
          flags: unit-tests
          name: unit-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Job 2: Component Tests
  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Compile content
        run: pnpm run compile-content

      - name: Generate Prisma client
        run: pnpm run db:generate

      - name: Run component tests with coverage
        run: pnpm test --workspace=apps/web -- --testPathPattern="components.*test\\.tsx$" --coverage --maxWorkers=2
        env:
          CI: true

      - name: Upload component test coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./apps/web/coverage/coverage-final.json
          flags: component-tests
          name: component-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Job 3: E2E Tests with Playwright
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Compile content
        run: pnpm run compile-content

      - name: Generate Prisma client
        run: pnpm run db:generate

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload E2E test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: test-results/
          retention-days: 7

  # Job 4: Coverage Report & Summary
  coverage-report:
    name: Coverage Report
    needs: [unit-tests, component-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          path: coverage-artifacts

      - name: Generate coverage summary
        run: |
          echo "## ðŸ“Š Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage by Category" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | âœ… Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Component Tests | âœ… Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | âœ… Completed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- 370+ automated tests" >> $GITHUB_STEP_SUMMARY
          echo "- 14 E2E scenarios" >> $GITHUB_STEP_SUMMARY
          echo "- Full coverage reports available on Codecov" >> $GITHUB_STEP_SUMMARY

  # Job 5: Build Verification
  build-check:
    name: Build Verification
    needs: [unit-tests, component-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Compile content
        run: pnpm run compile-content

      - name: Generate Prisma client
        run: pnpm run db:generate

      - name: Type check
        run: pnpm run typecheck

      - name: Lint
        run: pnpm run lint

      - name: Build
        run: pnpm run build
        env:
          NODE_ENV: production
          CI: true
