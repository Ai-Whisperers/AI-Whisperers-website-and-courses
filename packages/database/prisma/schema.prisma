// AI Whisperers LMS Platform - Prisma Schema
// Database schema for Learning Management System with NextAuth integration
// PHASE 1.2: Moved to packages/database/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  // âœ… Using default output (node_modules/.prisma/client) for monorepo compatibility
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// NextAuth.js Models
// ============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  progress      CourseProgress[]

  // PHASE 4: Optimized indexes
  @@index([role])
  @@index([role, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// LMS Domain Models
// ============================================================================

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Course {
  id                  String      @id @default(cuid())
  title               String
  description         String      @db.Text
  slug                String      @unique
  price               Decimal     @db.Decimal(10, 2)
  currency            String      @default("USD")
  durationHours       Int
  difficulty          Difficulty
  published           Boolean     @default(false)
  featured            Boolean     @default(false)
  learningObjectives  String[]
  prerequisites       String[]
  thumbnailUrl        String?
  videoUrl            String?
  instructorId        String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  enrollments         Enrollment[]
  modules             CourseModule[]
  progress            CourseProgress[]

  // PHASE 4: Optimized indexes
  @@index([published, featured])
  @@index([published, featured, createdAt(sort: Desc)])
  @@index([instructorId])
  @@index([difficulty])
  @@index([price])
  @@index([createdAt(sort: Desc)])
  @@map("courses")
}

model CourseModule {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String   @db.Text
  order       Int
  duration    Int      // minutes
  videoUrl    String?
  content     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId, order])
  @@map("course_modules")
}

model Lesson {
  id          String       @id @default(cuid())
  moduleId    String
  title       String
  content     String       @db.Text
  videoUrl    String?
  order       Int
  duration    Int          // minutes
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  module      CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]

  @@index([moduleId, order])
  @@map("lessons")
}

model Enrollment {
  id              String           @id @default(cuid())
  userId          String
  courseId        String
  status          EnrollmentStatus @default(ACTIVE)
  enrolledAt      DateTime         @default(now())
  completedAt     DateTime?
  expiresAt       DateTime?
  paymentStatus   PaymentStatus    @default(PENDING)
  paymentAmount   Decimal          @db.Decimal(10, 2)
  paymentCurrency String           @default("USD")

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@map("enrollments")
}

model CourseProgress {
  id                String   @id @default(cuid())
  userId            String
  courseId          String
  completedLessons  Int      @default(0)
  totalLessons      Int
  progressPercent   Int      @default(0)
  lastAccessedAt    DateTime @default(now())
  startedAt         DateTime @default(now())
  completedAt       DateTime?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonProgress    LessonProgress[]

  @@unique([userId, courseId])
  // PHASE 4: Optimized indexes
  @@index([userId])
  @@index([userId, lastAccessedAt(sort: Desc)])
  @@index([courseId])
  @@index([lastAccessedAt(sort: Desc)])
  @@map("course_progress")
}

model LessonProgress {
  id                String         @id @default(cuid())
  progressId        String
  lessonId          String
  completed         Boolean        @default(false)
  completedAt       DateTime?
  watchTimeSeconds  Int            @default(0)
  lastWatchedAt     DateTime       @default(now())

  progress          CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson            Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  // PHASE 4: Optimized indexes
  @@index([progressId])
  @@index([lessonId])
  @@index([lastWatchedAt(sort: Desc)])
  @@map("lesson_progress")
}

// ============================================================================
// Payment & Transaction Models
// ============================================================================

model Transaction {
  id              String        @id @default(cuid())
  userId          String
  courseId        String
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  provider        String        // "stripe", "paypal", etc.
  providerTxnId   String?       @unique
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // PHASE 4: Optimized indexes
  @@index([userId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([courseId])
  @@index([status])
  @@index([status, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("transactions")
}

// ============================================================================
// Analytics & Reporting Models (Optional - for future)
// ============================================================================

model CourseAnalytics {
  id                  String   @id @default(cuid())
  courseId            String   @unique
  totalEnrollments    Int      @default(0)
  activeEnrollments   Int      @default(0)
  completionRate      Float    @default(0)
  averageProgress     Float    @default(0)
  totalRevenue        Decimal  @db.Decimal(10, 2) @default(0)
  averageRating       Float?
  lastCalculatedAt    DateTime @default(now())

  @@index([courseId])
  @@map("course_analytics")
}

// ============================================================================
// Content & Media Models
// ============================================================================

model Media {
  id          String   @id @default(cuid())
  type        String   // "video", "image", "document"
  url         String
  provider    String?  // "vimeo", "youtube", "s3"
  providerId  String?
  title       String?
  duration    Int?     // seconds for videos
  size        Int?     // bytes
  mimeType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([provider])
  @@map("media")
}

// ============================================================================
// Quiz & Assessment Models (Future Enhancement)
// ============================================================================

model Quiz {
  id          String   @id @default(cuid())
  courseId    String
  moduleId    String?
  title       String
  description String?  @db.Text
  passingScore Int     @default(70)
  timeLimit   Int?     // minutes
  maxAttempts Int      @default(3)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  questions   Question[]
  attempts    QuizAttempt[]

  @@index([courseId])
  @@index([moduleId])
  @@map("quizzes")
}

model Question {
  id          String   @id @default(cuid())
  quizId      String
  type        String   // "multiple_choice", "true_false", "essay"
  question    String   @db.Text
  options     Json?    // For multiple choice
  correctAnswer String? @db.Text
  points      Int      @default(1)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@map("questions")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  quizId      String
  userId      String
  score       Float
  passed      Boolean
  answers     Json
  startedAt   DateTime @default(now())
  completedAt DateTime?

  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // PHASE 4: Optimized indexes
  @@index([quizId])
  @@index([userId])
  @@index([userId, quizId, startedAt(sort: Desc)])
  @@index([userId, startedAt(sort: Desc)])
  @@map("quiz_attempts")
}

// ============================================================================
// Certificate Models (Future Enhancement)
// ============================================================================

model Certificate {
  id            String   @id @default(cuid())
  userId        String
  courseId      String
  certificateNo String   @unique
  issuedAt      DateTime @default(now())
  expiresAt     DateTime?
  pdfUrl        String?

  // PHASE 4: Optimized indexes
  @@index([userId])
  @@index([userId, issuedAt(sort: Desc)])
  @@index([courseId])
  @@map("certificates")
}
